JAVA MEMORY MANAGEMENT

1. Heap area - The memory in the heap is allocated for all the class instances and arrays
2. Method area - Method area is used to store class-level information such as class structures, Method bytecode, Static variables, Constant pool, Interfaces.
3. Stack area - JVM stack is used to store method execution data, including local variables, method arguments, and return addresses

Static variables are stored in the Method Area.
Instance variables are stored in the Heap.
Local Variables are stored Stack.

FINALLY

1. We can use finally block without catch block.
2. If we have return statement in try and finally block the finally will execute first then it will return.
3. If we have return statement in try and return statement in finally block then return in finally will override return in try.

OVERRIDING

Access Modifier - The base class must have more restricted access modifier then child class.

class Human{
   public static void walk()
   {
       System.out.println("Human walks");
   }
}
class Boy extends Human{
   public static void walk(){
       System.out.println("Boy walks");
   }
   public static void main( String args[]) {
       Human obj = new Boy();

       Human obj2 = new Human();
       obj.walk();
       obj2.walk();
   }
}

O/P : Human walks
      Human walks

    class Human{
     public void walk()
     {
         System.out.println("Human walks");
     }
    }
    class Boy extends Human{
     public void walk(){
         System.out.println("Boy walks");
     }
     public static void main( String args[]) {
         Human obj = new Boy();

         Human obj2 = new Human();
         obj.walk();
         obj2.walk();
     }
    }

    O/P : Boy walks
          Human walks

Aggregation vs Association vs Composition

Aggregation is a special form of association which is a unidirectional one way relationship between classes (or entities), for e.g. Wallet and Money classes.

Composition is a restricted form of Aggregation in which two entities (or you can say classes) are highly dependent on each other. For e.g. Human and Heart

Association is a relationship between two separate classes and the association can be of any type say one to one, one to may etc.


SUPER

If we have args constructor and no arg constructor in child class and when we initialize the child class with args or no args then first base class constructor calls.


EXCEPTIONS WITH INHERITANCE

If parent class not having exception and child class has checked exception / Exception class.    O/P compilation error

If parent class not having exception and child class has unchecked exception.    O/P no compilation error

If parent class has runtime/checked exception and child class has Exception class / Throwable.    O/P compilation error

If parent class has runtime exception and child class has checked exception.    O/P compilation error

If parent class has checked exception and child class has runtime exception.    O/P no compilation error

If parent class has ArrayIndexOutOfBoundsException and child class has runtime exception.    O/P no compilation error

If parent class has checked/unchecked/Exception and child class has no exception.    O/P no compilation error


MULTI-THREADING

CountDownLatch

When we create an object of CountDownLatch, we specify the number of threads it should wait for, all such thread are required to do count down by calling CountDownLatch.countDown() once they are completed or ready to the job.
As soon as count reaches zero, the waiting task starts running.

CountDownLatch latch = new CountDownLatch(4);
latch.await();
latch.countDown();


ReentrantLock

ReentrantLock tracks a “hold count” which is a value that starts at 1 when a thread first locks the resource. Each time the thread re-enters the lock, the count is incremented.
The count is decremented when the lock is released. Once the hold count reaches zero, the lock is fully released.

ReentrantLock lock = new ReentrantLock()
lock.lock();
lock.unlock();


CyclicBarrier

CyclicBarrier is used to make threads wait for each other.
It is used when different threads process a part of computation and when all threads have completed the execution, the result needs to be combined in the parent thread.

CyclicBarrier newBarrier = new CyclicBarrier(numberOfThreads);
newBarrier.await();


Semaphore

A semaphore controls access to a shared resource through the use of a counter. If the counter is greater than zero, then access is allowed. If it is zero, then access is denied.

Semaphore sem = new Semaphore(1);
sem.acquire();
sem.release();


COLLECTIONS

Interfaces

Collection
List
Set
Queue
Dequeue
Map
SortedSet
SortedMap
NavigableMap
NavigableSet
ConcurrentMap
BlockingQueue


List                    InsertionBeginning   InsertionEnd   DeletionBeginning   DeletionEnd   Searching   Synchronised/not Synchronised   FailSafe/FailFast   DataStructure
ArrayList               O(N)                 O(1)           O(n)                O(n)          O(n)        not Synchronised                FailFast            Array
LinkedList              O(1)                 O(n)           O(1)                O(n)          O(n)        not Synchronised                FailFast            Doubly Linked List
Vector                  O(n)                 O(n)           O(n)                O(1)          O(n)        Synchronised                    FailFast            Array
Stack                   O(n)                 O(1)           O(n)                O(1)          O(n)        not Synchronised                FailFast            Vector
CopyOnWriteArrayList    O(n)                 O(n)           O(n)                O(n)          O(n)        Synchronised                    FailSafe            Array

Set                     InsertionBeginning   InsertionEnd   Insertion   DeletionBeginning   DeletionEnd   Deletion   Searching   Synchronised/not Synchronised   FailSafe/FailFast   DataStructure
HashSet                 -                    -              O(1)        -                   -             O(1)       O(1)        not Synchronised                FailFast            HashMap
CopyOnWriteArraySet     -                    -              O(n)        -                   -             O(n)       O(n)        Synchronised                    FailSafe            CopyOnWriteArrayList -> Array
LinkedHashSet           -                    -              O(1)        -                   -             O(1)       O(1)        not Synchronised                FailFast            HashTable and Doubly-linked list
EnumSet                 -                    -              O(1)        -                   -             O(1)       O(1)        not Synchronised                FailFast            bit vector
TreeSet                 -                    -              O(log n)    -                   -             O(log n)   O(log n)    not Synchronised                FailFast            TreeMap
ConcurrentSkipListSet   -                    -              O(log n)    -                   -             O(log n)   O(log n)    Synchronised                    FailSafe            skip list

Map                    InsertionBeginning   InsertionEnd   Insertion   DeletionBeginning   DeletionEnd   Deletion   Searching   Synchronised/not Synchronised   FailSafe/FailFast   DataStructure
HashMap                -                    -              O(n)        -                   -             O(n)       O(n)        not Synchronised                FailFast            TreeNode or LinkedList
LinkedHashMap          -                    -              O(1)        -                   -             O(1)       O(1)        not Synchronised                FailFast            Doubly-linked list
ConcurrentHashMap      -                    -              O(1)        -                   -             O(1)       O(1)        Synchronised                    FailSafe            Segmented Locking
TreeMap                -                    -              O(log n)    -                   -             O(log n)   O(log n)    not Synchronised                FailFast            Red-Black tree
EnumMap                -                    -              O(1)        -                   -             O(1)       O(1)        not Synchronised                FailFast            Array
HashTable              -                    -              O(1)        -                   -             O(1)       O(1)        Synchronised                    FailFast            Array -> LinkedList

Queue
ArrayBlockingQueue
ArrayDeque
AbstractQueue
PriorityQueue
PriorityBlockingQueue
DelayQueue
ConcurrentLinkedQueue
LinkedBlockingQueue
LinkedTransferQueue
ConcurrentLinkedDeque











